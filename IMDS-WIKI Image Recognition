{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy.io import loadmat\n",
    "import pandas as pd\n",
    "import datetime as date"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load mat data\n",
    "imdb_data = loadmat('imdb/imdb.mat')\n",
    "wiki_data = loadmat('wiki/wiki.mat')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['__header__', '__version__', '__globals__', 'imdb'])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imdb_data.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b'MATLAB 5.0 MAT-file, Platform: GLNXA64, Created on: Sun Jan 17 11:30:27 2016'\n",
      "1.0\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    "print(imdb_data['__header__'])\n",
    "print(imdb_data['__version__'])\n",
    "print(imdb_data['__globals__'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "imdb_data = imdb_data['imdb']\n",
    "wiki_data = wiki_data['wiki']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Notes:**<br>\n",
    "\n",
    "Here are 10 features in imdb data set: <br>  'dob',  'photo_taken',  'full_path',  'gender',  'name',  'face_location', \n",
    "'face_score', 'second_face_score',  'celeb_names',  'celeb_id'\n",
    "\n",
    "Here are 8 features in wiki data set: <br> 'dob', 'photo_taken', 'full_path', 'gender', 'name', 'face_location', 'face_score', 'second_face_score', "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "imdbColumnName = ['dob','photo_taken','full_path','gender','name','face_location',\n",
    "                  'face_score','second_face_score','celeb_names','celeb_id']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "imdb data set\n",
      "   # of records for dob:                 460723\n",
      "   # of records for photo_taken:         460723\n",
      "   # of records for full_path:           460723\n",
      "   # of records for gender:              460723\n",
      "   # of records for name:                460723\n",
      "   # of records for face_location:       460723\n",
      "   # of records for face_score:          460723\n",
      "   # of records for second_face_score:   460723\n",
      "   # of records for celeb_names:         20284\n",
      "   # of records for celeb_id:            460723\n"
     ]
    }
   ],
   "source": [
    "print('imdb data set')\n",
    "for i in range(len(imdbColumnName)):\n",
    "    print('   # of records for {Field}: '.format(Field=imdbColumnName[i]).ljust(40), \n",
    "          len(imdb_data[0][0][i][0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Notes** <br>\n",
    "the number of records for celeb_names field does not match the count for other field. We assume that all orders are mapped well with each other except the celeb_names field, thus celeb_names field will not be included in the following DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "wikiColumnName = ['dob','photo_taken','full_path','gender','name','face_location',\n",
    "                  'face_score','second_face_score']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wiki data set\n",
      "   # of records for dob:                 62328\n",
      "   # of records for photo_taken:         62328\n",
      "   # of records for full_path:           62328\n",
      "   # of records for gender:              62328\n",
      "   # of records for name:                62328\n",
      "   # of records for face_location:       62328\n",
      "   # of records for face_score:          62328\n",
      "   # of records for second_face_score:   62328\n"
     ]
    }
   ],
   "source": [
    "print('wiki data set')\n",
    "for i in range(len(wikiColumnName)):\n",
    "    print('   # of records for {Field}: '.format(Field=wikiColumnName[i]).ljust(40), \n",
    "          len(wiki_data[0][0][i][0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Notes**<br>\n",
    "The number of records per each factor match well. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# only extract fields both exist in wiki and imdb data set\n",
    "imdb = pd.DataFrame()\n",
    "for i in range(len(wikiColumnName)):\n",
    "        imdb[wikiColumnName[i]] = imdb_data[0][0][i][0]\n",
    "        \n",
    "wiki = pd.DataFrame()\n",
    "for i in range(len(wikiColumnName)):\n",
    "        wiki[wikiColumnName[i]] = wiki_data[0][0][i][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dob</th>\n",
       "      <th>photo_taken</th>\n",
       "      <th>full_path</th>\n",
       "      <th>gender</th>\n",
       "      <th>name</th>\n",
       "      <th>face_location</th>\n",
       "      <th>face_score</th>\n",
       "      <th>second_face_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>693726</td>\n",
       "      <td>1968</td>\n",
       "      <td>[01/nm0000001_rm124825600_1899-5-10_1968.jpg]</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[Fred Astaire]</td>\n",
       "      <td>[[1072.926, 161.838, 1214.7839999999999, 303.6...</td>\n",
       "      <td>1.459693</td>\n",
       "      <td>1.118973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>693726</td>\n",
       "      <td>1970</td>\n",
       "      <td>[01/nm0000001_rm3343756032_1899-5-10_1970.jpg]</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[Fred Astaire]</td>\n",
       "      <td>[[477.184, 100.352, 622.592, 245.76]]</td>\n",
       "      <td>2.543198</td>\n",
       "      <td>1.852008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>693726</td>\n",
       "      <td>1968</td>\n",
       "      <td>[01/nm0000001_rm577153792_1899-5-10_1968.jpg]</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[Fred Astaire]</td>\n",
       "      <td>[[114.96964308962852, 114.96964308962852, 451....</td>\n",
       "      <td>3.455579</td>\n",
       "      <td>2.985660</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      dob  photo_taken                                       full_path  \\\n",
       "0  693726         1968   [01/nm0000001_rm124825600_1899-5-10_1968.jpg]   \n",
       "1  693726         1970  [01/nm0000001_rm3343756032_1899-5-10_1970.jpg]   \n",
       "2  693726         1968   [01/nm0000001_rm577153792_1899-5-10_1968.jpg]   \n",
       "\n",
       "   gender            name                                      face_location  \\\n",
       "0     1.0  [Fred Astaire]  [[1072.926, 161.838, 1214.7839999999999, 303.6...   \n",
       "1     1.0  [Fred Astaire]              [[477.184, 100.352, 622.592, 245.76]]   \n",
       "2     1.0  [Fred Astaire]  [[114.96964308962852, 114.96964308962852, 451....   \n",
       "\n",
       "   face_score  second_face_score  \n",
       "0    1.459693           1.118973  \n",
       "1    2.543198           1.852008  \n",
       "2    3.455579           2.985660  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imdb.head(n=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dob                       0\n",
       "photo_taken               0\n",
       "full_path                 0\n",
       "gender                 8462\n",
       "name                      0\n",
       "face_location             0\n",
       "face_score                0\n",
       "second_face_score    246926\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check null\n",
    "imdb.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dob</th>\n",
       "      <th>photo_taken</th>\n",
       "      <th>full_path</th>\n",
       "      <th>gender</th>\n",
       "      <th>name</th>\n",
       "      <th>face_location</th>\n",
       "      <th>face_score</th>\n",
       "      <th>second_face_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>723671</td>\n",
       "      <td>2009</td>\n",
       "      <td>[17/10000217_1981-05-05_2009.jpg]</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[Sami Jauhojärvi]</td>\n",
       "      <td>[[111.29109473290997, 111.29109473290997, 252....</td>\n",
       "      <td>4.300962</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>703186</td>\n",
       "      <td>1964</td>\n",
       "      <td>[48/10000548_1925-04-04_1964.jpg]</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[Dettmar Cramer]</td>\n",
       "      <td>[[252.48330229530742, 126.68165114765371, 354....</td>\n",
       "      <td>2.645639</td>\n",
       "      <td>1.949248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>711677</td>\n",
       "      <td>2008</td>\n",
       "      <td>[12/100012_1948-07-03_2008.jpg]</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[Marc Okrand]</td>\n",
       "      <td>[[113.52, 169.83999999999997, 366.08, 422.4]]</td>\n",
       "      <td>4.329329</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      dob  photo_taken                          full_path  gender  \\\n",
       "0  723671         2009  [17/10000217_1981-05-05_2009.jpg]     1.0   \n",
       "1  703186         1964  [48/10000548_1925-04-04_1964.jpg]     1.0   \n",
       "2  711677         2008    [12/100012_1948-07-03_2008.jpg]     1.0   \n",
       "\n",
       "                name                                      face_location  \\\n",
       "0  [Sami Jauhojärvi]  [[111.29109473290997, 111.29109473290997, 252....   \n",
       "1   [Dettmar Cramer]  [[252.48330229530742, 126.68165114765371, 354....   \n",
       "2      [Marc Okrand]      [[113.52, 169.83999999999997, 366.08, 422.4]]   \n",
       "\n",
       "   face_score  second_face_score  \n",
       "0    4.300962                NaN  \n",
       "1    2.645639           1.949248  \n",
       "2    4.329329                NaN  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wiki.head(n=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dob                      0\n",
       "photo_taken              0\n",
       "full_path                0\n",
       "gender                2643\n",
       "name                     0\n",
       "face_location            0\n",
       "face_score               0\n",
       "second_face_score    58232\n",
       "dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check null\n",
    "wiki.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# combine imdb and wiki data set\n",
    "imdb['dataset'] = 'imdb'\n",
    "wiki['dataset'] = 'wiki'\n",
    "imdb_wiki = pd.concat([imdb, wiki], axis=0, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# modify the data format of 'full_path', 'name', 'face_location' field\n",
    "imdb_wiki['full_path'] = imdb_wiki['full_path'].apply(lambda x: x[0] if x.size > 0 else None)\n",
    "imdb_wiki['name'] = imdb_wiki['name'].apply(lambda x: x[0]if x.size > 0 else None)\n",
    "imdb_wiki['face_location'] = imdb_wiki['face_location'].apply(lambda x: x[0]if x.size > 0 else None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dob</th>\n",
       "      <th>photo_taken</th>\n",
       "      <th>full_path</th>\n",
       "      <th>gender</th>\n",
       "      <th>name</th>\n",
       "      <th>face_location</th>\n",
       "      <th>face_score</th>\n",
       "      <th>second_face_score</th>\n",
       "      <th>dataset</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>693726</td>\n",
       "      <td>1968</td>\n",
       "      <td>01/nm0000001_rm124825600_1899-5-10_1968.jpg</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Fred Astaire</td>\n",
       "      <td>[1072.926, 161.838, 1214.7839999999999, 303.69...</td>\n",
       "      <td>1.459693</td>\n",
       "      <td>1.118973</td>\n",
       "      <td>imdb</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>693726</td>\n",
       "      <td>1970</td>\n",
       "      <td>01/nm0000001_rm3343756032_1899-5-10_1970.jpg</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Fred Astaire</td>\n",
       "      <td>[477.184, 100.352, 622.592, 245.76]</td>\n",
       "      <td>2.543198</td>\n",
       "      <td>1.852008</td>\n",
       "      <td>imdb</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>693726</td>\n",
       "      <td>1968</td>\n",
       "      <td>01/nm0000001_rm577153792_1899-5-10_1968.jpg</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Fred Astaire</td>\n",
       "      <td>[114.96964308962852, 114.96964308962852, 451.6...</td>\n",
       "      <td>3.455579</td>\n",
       "      <td>2.985660</td>\n",
       "      <td>imdb</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      dob  photo_taken                                     full_path  gender  \\\n",
       "0  693726         1968   01/nm0000001_rm124825600_1899-5-10_1968.jpg     1.0   \n",
       "1  693726         1970  01/nm0000001_rm3343756032_1899-5-10_1970.jpg     1.0   \n",
       "2  693726         1968   01/nm0000001_rm577153792_1899-5-10_1968.jpg     1.0   \n",
       "\n",
       "           name                                      face_location  \\\n",
       "0  Fred Astaire  [1072.926, 161.838, 1214.7839999999999, 303.69...   \n",
       "1  Fred Astaire                [477.184, 100.352, 622.592, 245.76]   \n",
       "2  Fred Astaire  [114.96964308962852, 114.96964308962852, 451.6...   \n",
       "\n",
       "   face_score  second_face_score dataset  \n",
       "0    1.459693           1.118973    imdb  \n",
       "1    2.543198           1.852008    imdb  \n",
       "2    3.455579           2.985660    imdb  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imdb_wiki.head(n=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Quantiles of dob and photo_taken fields:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dob</th>\n",
       "      <th>photo_taken</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.00</th>\n",
       "      <td>47.0</td>\n",
       "      <td>1940.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.01</th>\n",
       "      <td>699497.5</td>\n",
       "      <td>1959.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.25</th>\n",
       "      <td>715961.0</td>\n",
       "      <td>2003.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.50</th>\n",
       "      <td>719895.0</td>\n",
       "      <td>2008.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.75</th>\n",
       "      <td>723199.0</td>\n",
       "      <td>2011.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.99</th>\n",
       "      <td>729269.0</td>\n",
       "      <td>2015.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.00</th>\n",
       "      <td>736011.0</td>\n",
       "      <td>2015.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           dob  photo_taken\n",
       "0.00      47.0       1940.0\n",
       "0.01  699497.5       1959.0\n",
       "0.25  715961.0       2003.0\n",
       "0.50  719895.0       2008.0\n",
       "0.75  723199.0       2011.0\n",
       "0.99  729269.0       2015.0\n",
       "1.00  736011.0       2015.0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('Quantiles of dob and photo_taken fields:')\n",
    "imdb_wiki[['dob','photo_taken']].quantile([0, 0.01, 0.25, 0.5, 0.75, 0.99, 1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Notes**: <br>\n",
    "According the data description on IMDB-WIKI data set site (https://data.vision.ee.ethz.ch/cvl/rrothe/imdb-wiki/), the age of a person can be calculated based on the date of birth and the time when the photo was taken, and we can assume that the photo was taken in the middle of the year. The dob is Matlab serial date number, which start from 0000-01-01.<br> \n",
    "\n",
    "From the quantiles summarized above, the earliest photo was taken in 1940 while the earliest date of birth is 47 (in Matlab serial date number), which is 0000-02-16. Given the history of the photography, the first camera was invented around the mid-1820s (https://en.wikipedia.org/wiki/History_of_photography), thus we can conclude that the dob data recorded in the database was not exactly accurate, and we need to clean the data before moving forward to calculate the age. <br>\n",
    "\n",
    "The method to filter out invalid bod records is simple and straightforward. Assuming the maximum age is 100 years old, the earliest date of birth would be 1840-01-01 (672046 in Matlab serial date number), thus records with dob greater than or equal to 672046 are reserved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# of records to be dropped:  266\n"
     ]
    }
   ],
   "source": [
    "print('# of records to be dropped: ', imdb_wiki[imdb_wiki.dob < 672046].shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# filter invalid dob records\n",
    "imdb_wiki = imdb_wiki[imdb_wiki.dob >= 672046]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert dob to yyyy-mm-dd format\n",
    "# the earliest date in Matlab is 0000-01-01, while the earliest date in python.datetime package is 0001-01-01\n",
    "imdb_wiki['dob_yyyy_mm_dd'] = imdb_wiki['dob'].apply(lambda x: \n",
    "                                date.datetime.fromordinal(date.datetime(1, 1, 1).toordinal() + x - 2 - 365))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert photo_taken to yyyy_mm_dd format\n",
    "# assume each photo was taken at the middle of the year, July 1st.\n",
    "imdb_wiki['photo_taken_yyyy_mm_dd'] = imdb_wiki['photo_taken'].apply(lambda x: date.datetime(x, 7, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get the time gap between dob and photo_taken in days\n",
    "imdb_wiki['age_day'] = imdb_wiki['photo_taken_yyyy_mm_dd'] - imdb_wiki['dob_yyyy_mm_dd']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get the time gap between dob and photo_taken in years, assume 365 days per year\n",
    "imdb_wiki['age_year'] = imdb_wiki['age_day'].apply(lambda x: x.days / 365)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Quantiles of age_year fields:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.00    -73.679452\n",
       "0.01     10.246137\n",
       "0.25     27.260274\n",
       "0.50     35.019178\n",
       "0.75     44.531507\n",
       "0.99     77.126027\n",
       "1.00    173.402740\n",
       "Name: age_year, dtype: float64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('Quantiles of age_year fields:')\n",
    "imdb_wiki['age_year'].quantile([0, 0.01, 0.25, 0.5, 0.75, 0.99, 1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Notes:**<br>\n",
    "From the age_year quantile statistics summarized above, here are photos taken before dob, which does not make sense and could be regarded as invalid records in the data set. Thus records with age_year less than 0 would be filtered out. <br>\n",
    "\n",
    "The age of the oldest person in the world is 122 years and 164 days, according to the records on Wikipedia (https://en.wikipedia.org/wiki/List_of_the_verified_oldest_people). And Our World in Data suggests that the life expectancy for Americans are 78.9 years(https://ourworldindata.org/life-expectancy). Thus, it would be reasonable to regard the records with age_year greater than 100 as invalid, and we take 123 as the ceiling of the age."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# of records to be dropped:  1979\n"
     ]
    }
   ],
   "source": [
    "print('# of records to be dropped: ', imdb_wiki[(imdb_wiki.age_year <= 0) |\n",
    "                                                (imdb_wiki.age_year > 123)].shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# filter the data set based on age_year\n",
    "imdb_wiki = imdb_wiki[(imdb_wiki.age_year > 0) & \n",
    "                      (imdb_wiki.age_year <= 123)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "size of the cleansed IMDB dataset:      460052\n",
      "size of the cleansed WIKI dataset:       60754\n",
      "size of the cleansed IMDB-WIKI dataset: 520806\n"
     ]
    }
   ],
   "source": [
    "print('size of the cleansed IMDB dataset:     ', imdb_wiki[imdb_wiki['dataset'] == 'imdb'].shape[0])\n",
    "print('size of the cleansed WIKI dataset:      ', imdb_wiki[imdb_wiki['dataset'] == 'wiki'].shape[0])\n",
    "print('size of the cleansed IMDB-WIKI dataset:', imdb_wiki.shape[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize Age Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get imdb data set\n",
    "imdb_age = imdb_wiki[imdb_wiki['dataset'] == 'imdb']['age_year']\n",
    "wiki_age = imdb_wiki[imdb_wiki['dataset'] == 'wiki']['age_year']\n",
    "imdb_wiki_age = imdb_wiki['age_year']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IMDB</th>\n",
       "      <th>WIKI</th>\n",
       "      <th>IMDB-WIKI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.00</th>\n",
       "      <td>0.038356</td>\n",
       "      <td>0.005479</td>\n",
       "      <td>0.005479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.05</th>\n",
       "      <td>18.498630</td>\n",
       "      <td>19.334247</td>\n",
       "      <td>18.646575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.25</th>\n",
       "      <td>27.895890</td>\n",
       "      <td>24.523973</td>\n",
       "      <td>27.353425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.50</th>\n",
       "      <td>35.435616</td>\n",
       "      <td>31.176712</td>\n",
       "      <td>35.073973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.75</th>\n",
       "      <td>44.397260</td>\n",
       "      <td>46.859589</td>\n",
       "      <td>44.564384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.95</th>\n",
       "      <td>61.649315</td>\n",
       "      <td>72.000959</td>\n",
       "      <td>62.967123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.00</th>\n",
       "      <td>119.364384</td>\n",
       "      <td>122.846575</td>\n",
       "      <td>122.846575</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            IMDB        WIKI   IMDB-WIKI\n",
       "0.00    0.038356    0.005479    0.005479\n",
       "0.05   18.498630   19.334247   18.646575\n",
       "0.25   27.895890   24.523973   27.353425\n",
       "0.50   35.435616   31.176712   35.073973\n",
       "0.75   44.397260   46.859589   44.564384\n",
       "0.95   61.649315   72.000959   62.967123\n",
       "1.00  119.364384  122.846575  122.846575"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get age qualtiles of each data set\n",
    "age_quantile = pd.concat([imdb_age.quantile([0, 0.05, 0.25, 0.5, 0.75, 0.95, 1]),\n",
    "                           wiki_age.quantile([0, 0.05, 0.25, 0.5, 0.75, 0.95, 1]),\n",
    "                           imdb_wiki_age.quantile([0, 0.05, 0.25, 0.5, 0.75, 0.95, 1])], axis=1, sort=False)\n",
    "age_quantile.columns = ['IMDB','WIKI','IMDB-WIKI']\n",
    "age_quantile"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Density Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# setup figure size\n",
    "plt.figure(figsize=(6,4))\n",
    "\n",
    "# Draw the density plot\n",
    "sns.distplot(imdb_age, hist = False, kde = True, kde_kws = {'linewidth': 2}, label = 'imdb')\n",
    "sns.distplot(wiki_age, hist = False, kde = True, kde_kws = {'linewidth': 2}, label = 'wiki')\n",
    "sns.distplot(imdb_wiki_age, hist = False, kde = True, kde_kws = {'linewidth': 2}, label = 'wiki_imdb')\n",
    "    \n",
    "# Plot formatting\n",
    "plt.legend(prop={'size': 12})\n",
    "plt.title('Age Distribution (density plot)')\n",
    "plt.xlim((0, 100)) \n",
    "plt.xlabel('Age', fontsize=12)\n",
    "plt.ylabel('Density', fontsize=12);\n",
    "plt.savefig(\"IMDB-WIKI age density plot.pdf\", bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1AAAAEmCAYAAABs/3HEAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nO3de5glZXnv/e8vg4BBhIgjw9HBwFbBAzuOqIluUCNCthF9BUVRMLJDTOTNjibZQgxGCZoQdyRxQw6oKI4aUAyvY4JBDUo0UWSIKKewMwLKOI4MggQwgAP3+0fVGtb0rJ5ePd3r0L2+n+vqa2pVPVXrqdWr76m7nkOlqpAkSZIkzeynRl0BSZIkSVooTKAkSZIkqU8mUJIkSZLUJxMoSZIkSeqTCZQkSZIk9ckESpIkSZL6ZAIlSYtQkt9L8oF5PN49SZ7QLn84yRnzeOy/SnLafB1vyrEPTLK66/UtSX5xmrLPS3LjIOqxUCRZnqSSbLeN+/9tkiPmu16SNE5MoCRpHiX5UpI7k+ww4Pe4L8ndSf4jyVVJTul+z6p6d1X9jz6PNWO5qnpUVd00D3V/fZKvTDn2G6vqD+d67Gn8IfC/+ylYVV+uqifOVC7JO5J8dM41W+Cm+Rz+GHjXKOojScNiAiVJ8yTJcuB5QAEvHfDbnVxVOwN7AL8NHAtckiTz+Sbb2hIxDpLsATwf+P9GXZd+LeTPG6Cqvg48OsmKUddFkgbFBEqS5s/xwNeADwMndG9IsluSz7QtRlcmOaO7JSbJk5J8PskdSW5M8sp+3rCq7q2qL9EkbM8B/nt7vE2tA0l2TPLRJD9M8qP2/XdP8i6ahO/stove2W35SvKmJP8O/HvXuv273vqxbX3vTnJ5kse35bboAtZp5UryZOCvgOe07/ejdvtmXQKT/GqSNe1nsSrJnl3bKskbk/x729J3zlaSxhcB/1pV901Zf3CSbyW5K8mFSXZsj31YkrVd7/XWJN9rz/HGJC9su6f9HvCq9hy+2Zbds63rHW3df7XrOI9Mcn5b3xuS/K8p73NL+17fAu5Nsl3bovjt9r2vT/LyrvKvT/LPSc5qf583Jfn5dv2tSW5Lstn3r1v7+/ijJF9vP4NPJ3nMNGV7ntd0n0PrS7TfQ0lajEygJGn+HA98rP15cZLdu7adA9wLLKNJrjZd4CbZCfg88HHgccCrgb9IclC/b1xV3wVW0yREU50A7ALsA+wGvBH4z6p6G/BlmtasR1XVyV37vAx4FnDgNG95HE33uMcCV7fnPFMdb2jf+6vt++06tUySFwB/BLySpnXtO8AFU4q9BHgm8PS23IunecunAr3GNL0SOALYD3ga8Poe9XgicDLwzLal78XALVX1D8C7gQvbc3h6u8vfAGuBPYGjgXcneWG77Q+A5cATaJK61/ao06tpko5dq2oj8G2a3+UuwDuBj7Ytah3PAr5F8/v8OM1n9Exg//b4Zyd51DSfCzTf1Te09d0IvG+acj3PayufA8ANNL8bSVqUTKAkaR4keS7weOATVXUVzQXwa9ptS4BXAH9QVT+uquuB87t2fwnNxfmHqmpjVf0r8CmaC9bZWAf0akn4Cc2F9v5V9WBVXVVV/zHDsf6oqu6oqv+cZvvfV9U/VdX9wNtoWpX2mWV9ezkOOK+q/rU99qntsZd3lfnjqvpRmzR+ETh4mmPtCtzdY/37qmpdVd0BfGaa/R8EdgAOTPKIqrqlqr7d603a834u8Naquq+qrgY+ALyuLfJK4N1VdWdVraV3svK+qrq183lX1SfbOj5UVRfStAQe0lX+5vb78iBwIU1yfHpV3V9VnwMeoEmmprOyqq6tqnuB04BXtt/T2ZzXdO6m+ewlaVEygZKk+XEC8Lmqur19/XEebmVaCmwH3NpVvnv58cCz2u5YP2q7th1H01o1G3sBd/RYvxK4FLggybokf5LkETMc69Z+t1fVPe377jl98b7tSdPq1H3sH9KcW8f6ruUfA9O1tNwJ7Nxj/Yz7V9Ua4LeAdwC3JbmguythjzrfUVXdydp3uuq8J9P/7nuuS3J8kqu7vg9PoWnt6/hB13In6Zq6bmstUN3v9x3gEVOO36n31s5rOjsDP5qhjCQtWCZQkjRHSR5J08pwaJL1SdYDbwaenuTpwAaablJ7d+3W3VpzK3B5Ve3a9fOoqvr1WdRhH+AZNF3yNlNVP6mqd1bVgcDP07R4Hd/ZPM0hp1u/Rf3brmKPoWkBu7dd/dNdZbsTwZmOu44moewceyea1rPvzbBfL98C/ss27AdAVX28qjotiwWc2dk0peg64DFJupO1fXm4zt9n+t/9prfrLLTjyd5P04Vwt7ar47XAfE4Q0l2HfWlaKW+fUmam85rud/lk4JvTbJOkBc8ESpLm7mU0Xb4OpOkOdjDNReSXgePbblZ/C7wjyU8neRIPJzAAfwf8lySvS/KI9ueZ7aQLW9Ue71Dg08DXgUt6lHl+kqe2XbT+g+Zi+cF28w9oxubM1i8leW6S7WnGQl3RdkHbQHOB/dokS5K8AfjZrv1+AOzd7tfLx4FfSXJwmmnZ390e+5ZtqOPngZ/rTBIxG0memOQFbR3uo2nR6f7Mlif5KYCquhX4F+CP0kzY8TTgRB4eF/YJ4NQkP5NkL5rEaGt2oklONrR1+RWaFqj59No0z8j6aeB04KL2e7pJH+e12efQ5VDgs/NcX0kaGyZQkjR3JwAfqqrvVtX6zg9wNnBcmhnpTqaZEGA9TZe6vwHuB2i7SB1OMxX5urbMmTRjcKZzdpK7aS5i/4xmzNQRVfVQj7LLgItokqcbgMuBzvN7/hw4up0hbrqJBHr5OM3kCHfQtHwd17XtV4Hfpel6dxDNRXjHZcB1wPokU1s8qKp/pBmT8ymalpufpflcZq3t0nYZcNQ27L4DzTONbqf5fTyOZtY5gE+2//4wyb+2y6+mmShiHXAxzXi3z7fbTqeZiOFm4As0v4v7t1Lv64E/Bb5K8/t9KvDP23AOW7OSZrbI9cCOwG9OU25r57XF55DkmcC97XTmkrQopWqm3hSSpPmW5ExgWVVNO9205i7JgTQTdhxSY/IfXpJfB46tqkNH9P5fAj5aVR8YwLE/BXywqrZoCZWkxWJBP7BPkhaKttve9sA1NNNNnwj8j5FWagK0rTnPHGUd2unHn0DTonQAzYOPzx5lnQalql4x6jpI0qCZQEnScOxM021vT+A2mi5anx5pjTQs2wN/TfPcqR/RPLPpL0ZaI0nSNrMLn0YuyXXAm6rqS3M8zjtonnPz2vaZMTcDj2gfSilJW0hyD/C0qropyYeBtVX1+z3K/RXwvar6w2HXUZI0XpxEQiNXVQfNNXmSpG3RThd/Ux/l3mjyJC0sSa5Lctg8HOcdST7aLi9PUu3kQPMuyV8lOa1dPizJ2mnKPS/JjYOog2ZmFz5JkiQtOlV10KjrMFtV9cY+y30ZeOKAq6Np2AKlkUtyS5JfbO/wfDLJR5PcneSaJP8lyalJbktya5LDu/bbL8nlbdnPA4/tcfg3JFmX5PtJfnt4ZyVplJL8SpLPdL1ek+QTXa9vbZ81VUn277H/zkm+mOR9aXw4yRnDqr8kaXyZQGnc/DLN80l+BvgGcCnN93Qvmmep/HVX2Y8DV9EkTn9I8yyeqZ5PM+vV4cApSX5xYDWXNE4uB56X5KfaWfAeAfwCQJInAI8CvtVrxyS7Af8I/HNV/ea4TH8uaXbG5QZt+yDq/0zy2Pb17yfZmOTR7eszkvxZuzztzZokv5nk+iR7b617nwbPBErj5stVdWk78cMngaXAH1fVT2hmrlqeZNck+9JMTXxaVd1fVf8EfKbH8d5ZVfdW1TXAh2geCilpkWvHNd0NHAwcSnMz5nvtdPKH0sSaXg8d3pMm+fpkr8kkJC1YI7tBW1X3AVfSxB6A/wZ8h/amTvv68q1Vvh0X9Xrg0KoycRoxEyiNmx90Lf8ncHtVPdj1Gpo7x3sCd1bVvV3lv9PjeLdO2b7nfFVU0ti7HDiMhy9OvkRzAXMo01+s/HfgkcBfDb56koZo1DdoLwcObSefeBrwvvb1ju37fXma/ZLkvcCLgedX1YZZnbUGwgRKC9X3gZ9JslPXun17lNtnyvZ1A62VpHHSSaCe1y5fzswJ1PuBfwAumRJfJC1so75B24lHP0fzQPXP08SiZwNrqur2afbbFTgJ+KOqumuG99CQmEBpQaqq7wCrgXcm2T7Jc2ma56c6LclPJzkI+BXgwmHWU9JIXU7TzeaRbZeXLwNHALvRdOGZzsnAjcDfJXnkwGspaZwM6gbtv9DMmvdy4PKqur7d77+z9e57dwIvAT6U5Be2Uk5DZAKlhew1wLOAO4A/AD7So8zlwBqaAeH/u6o+N7zqSRqlqvq/wD20XWOq6j+Am2gmh3hwK/sVzR3fW4FPt11sJE2AQd2graof04yrehMPJ0z/AvwaM4x/ap+VeRxwcZJnzeJ0NCA+B0ojV1XL28UvTFn/BWB51+uNQLpe30TTNafXMW/pKnvuvFVW0oJSVXtMeb1iyuvumPL6ruWHgOO7ir4eSZPiNcD5NDdov0pzg3bXKWU6N2h/iv5v0F4O/Ffg612vjwb+aaYdq+rzSX4FWJXkl/o5CQ1OnJ1VkiRJkvpjFz5JkiRJ6pMJlCRJkjRHST6b5J4eP7836rppftmFT5IkSZL6NHGTSDz2sY+t5cuXj7oaklpXXXXV7VW1dNT1mC1jiTR+jCeS5svW4snEJVDLly9n9erVo66GpFaSXg8oHHvGEmn8GE8kzZetxRPHQEmSJElSn0ygJEmSJKlPJlCSJEmS1CcTKEmSJEnqkwmUJEmSJPXJBEqSJEmS+mQCJUmSJEl9MoGSJEmSpD6ZQEmSJElSn0ygJsyyZZA0P8uWjbo2kkbFWCBpHHRikXFIC4kJ1IT5wQ96L0uaLFNjgRcwmkRJjkhyY5I1SU7psX2HJBe2269Isrxdf0iSq9ufbyZ5edc+tyS5pt22enhnszB1YpHXJFpItht1BSRJ48ELGE2SJEuAc4AXAWuBK5Osqqrru4qdCNxZVfsnORY4E3gVcC2woqo2JtkD+GaSz1TVxna/51fV7cM7G0nDZAuUJEmaRIcAa6rqpqp6ALgAOGpKmaOA89vli4AXJklV/bgrWdoRqKHUWNJYMIGSJEmTaC/g1q7Xa9t1Pcu0CdNdwG4ASZ6V5DrgGuCNXQlVAZ9LclWSkwZYf0kjYhc+SZI0idJj3dSWpGnLVNUVwEFJngycn+SzVXUf8AtVtS7J44DPJ/m3qvqnLd68Sa5OAth3333nch6ShswWKEmSNInWAvt0vd4bWDddmSTbAbsAd3QXqKobgHuBp7Sv17X/3gZcTNNVcAtVdW5VraiqFUuXLp3zyUgaHhMoSZI0ia4EDkiyX5LtgWOBVVPKrAJOaJePBi6rqmr32Q4gyeOBJwK3JNkpyc7t+p2Aw2kmnJC0iNiFb0IsW+YMW5IkdbQz6J0MXAosAc6rquuSnA6srqpVwAeBlUnW0LQ8Hdvu/lzglCQ/AR4CfqOqbk/yBODiJNBcY328qv5huGcmadCGlkAlOQL4c5og9YGq+uMp23cAPgI8A/gh8KqquiXJIcC5nWLAO6rq4nafW4C7gQeBjVW1YhjnshCZPEmStLmqugS4ZMq6t3ct3wcc02O/lcDKHutvAp4+/zWVNE6GkkD5rAVJkiRJi8GwxkD5rAVJWgCSpsuvJEnqbVgJ1EiftZDkpCSrk6zesGHDvJyQJC1WdvmVJGl6w0qg5vyshao6CHgmcGqSHdvtv1BVPwccCbwpyX/r9eZOFSpJkiRpPgwrgRrpsxYkSZIkaT4MK4HyWQuStIA4FkqSpN6GMgufz1qQpIXHsVCSBqXX8ykT2H13WL9+NHWS+jW050D5rAVJkiTB9DdovHGjhWBYXfgkSZIkacEzgdIWli1z/IMkSZLUiwmUttBpPrcZXZIkSdqcCZQkSZIk9ckESpIkSZL6ZAIlSZIkSX0ygVrkOhNCSJMgyRFJbkyyJskpPbbvkOTCdvsVSZZP2b5vknuS/M6w6ixJmp4TW2kcmUAtcv1MBGFw0mKQZAlwDnAkcCDw6iQHTil2InBnVe0PnAWcOWX7WcBnB11XSZpUs72x68RWGkcmUDI4abE4BFhTVTdV1QPABcBRU8ocBZzfLl8EvDBp/itP8jLgJuC6IdVXkiZOP9ca3tTVuDOBkrRY7AXc2vV6bbuuZ5mq2gjcBeyWZCfgrcA7t/YGSU5KsjrJ6g0bNsxbxSVJm/OmrsaZCZQ243gpLWC9vr3VZ5l3AmdV1T1be4OqOreqVlTViqVLl25jNSVJ0kK23agroPG3bFlzJ2j33WH9+lHXRprWWmCfrtd7A+umKbM2yXbALsAdwLOAo5P8CbAr8FCS+6rq7MFXW5IkLSS2QGlGjpHSAnElcECS/ZJsDxwLrJpSZhVwQrt8NHBZNZ5XVcurajnwZ8C7TZ6kybCts3cmOSTJ1e3PN5O8vN9jSlrYTKAkLQrtmKaTgUuBG4BPVNV1SU5P8tK22AdpxjytAd4CeGEjTbA5zt55LbCiqg4GjgD+Osl2fR5T0gJmF74J55gnLSZVdQlwyZR1b+9avg84ZoZjvGMglZM0jjbN3gmQpDN75/VdZY4C3tEuXwScnSRV9eOuMjvy8JjLfo4paQGzBUqSNC2nE9Yit82zdwIkeVaS64BrgDe22/s5pqQFzARKkrRVjn/UIjaX2Tupqiuq6iDgmcCpSXbs85g+FmEbdR7E640djZIJlCRJmlSzmb2TKbN3blJVNwD3Ak/p85gT8ViETrKTwJIlsx820Ku8E1tpHJhASZKkSbXNs3e2+2wHkOTxwBOBW/o85kToTnIeemjux3PctsbF0BIopwldmAxWkqTFao6zdz4X+GaSq4GLgd+oqtunO+bwzmr0Oi1P0mI1lFn4uqb0fBFN0/aVSVZVVfeMNJumCU1yLM00oa/i4WlCNybZgyZYfYamP/FMx5QkSZrWts7eWVUrgZX9HnOS2L1Oi92wWqA2TelZVQ8AnSk9ux0FnN8uXwS8sDNNaHs3B6aZJnQrx5QkSZKkeTOsBGqk04Q6040kNexaI0nS3AwrgRrZNKHt/ot+phtJ6oddayRJmpthJVAjmyZUkiRJkubLsBIopwmVJEmStOANZRa+dga9zpSeS4DzOtOEAqurahXNNKEr22lC76BJiKCZJvSUJD8BHqKdJhSg1zGHcT6SJEmSJtNQEihwmlBJkiRJC9/QHqSr4ejMsLVs2ahrIkmSJC0+JlCLTGeGLWfakiRJkuafCZQkaUa2bEuS1DCBkiT1xZZtSZJMoCRJkiSpbyZQi1gy6hpIkiRJi4sJlCRJkiT1yQRKkiRJkvpkAiVJkiRJfTKBkiRJkqQ+mUBJkiRJUp9MoBaJZcuGM+ueD9OUJEnSJDOBWiSG+YBLH6YpSZJGLfHGrkbDBEqSJE2kJEckuTHJmiSn9Ni+Q5IL2+1XJFnern9RkquSXNP++4Kufb7UHvPq9udxwzujyeSNXQ3bdqOugCRJ0rAlWQKcA7wIWAtcmWRVVV3fVexE4M6q2j/JscCZwKuA24Ffrqp1SZ4CXArs1bXfcVW1eignImnobIGSJEmT6BBgTVXdVFUPABcAR00pcxRwfrt8EfDCJKmqb1TVunb9dcCOSXYYSq0ljZwJlCRJmkR7Abd2vV7L5q1Im5Wpqo3AXcBuU8q8AvhGVd3fte5Dbfe905LeUzwlOSnJ6iSrN2zYMJfzkDRkJlCSJGkS9UpsajZlkhxE063v17q2H1dVTwWe1/68rtebV9W5VbWiqlYsXbp0VhWXNFpDS6AcqLm4OOuNJGmBWwvs0/V6b2DddGWSbAfsAtzRvt4buBg4vqq+3dmhqr7X/ns38HGaroITYViPVJFGbSgJVNdAzSOBA4FXJzlwSrFNAzWBs2ju6MDDAzWfCpwArJyy33FVdXD7c9vATkJbcNYbSdICdiVwQJL9kmwPHAusmlJmFc21B8DRwGVVVUl2Bf4eOLWq/rlTOMl2SR7bLj8CeAlw7YDPY2x4XaBJMawWKAdqStIiYOuzFot2TNPJNDPo3QB8oqquS3J6kpe2xT4I7JZkDfAWoNOD5mRgf+C0Kb1gdgAuTfIt4Grge8D7h3dWk8vYpGEa1jTmvQZqPmu6MlW1MUlnoObtXWWmG6j5IPAp4Iyqmtp/eVFbtsw7PpKGy5ijxaKqLgEumbLu7V3L9wHH9NjvDOCMaQ77jPmso/pnbNKwDKsFaqQDNRfzTDcGC0mSJGl4hpVAjXSgpjPdSJNhDpPVHNLVDeebSV4+7LpLkqSFYVgJlAM1JQ3UHCeruRZYUVUHA0cAf93eyJEkzcDZ9zRphpJAOVBT0hDMZbKaH7dxCmBHtuxiLEmahsMJNGmGdofVgZqLUwK77w7r14+6JtLcJqtJ8izgPODxwOu6EqpNkpwEnASw7777zvsJSJKk8Te0B+lq8fLOk8bEnCarqaorquog4JnAqUl23KKg4yklSZp4JlCSFos5TVbTUVU3APcCTxlYTSVJ0oJlAiVpsZjLZDX7dSaNSPJ44InALcOptiRJWkicZUrSotCOaepMVrMEOK8zWQ2wuqpW0UxWs7KdrOYOmiQL4LnAKUl+AjwE/EZV3b7lu0iSxpljszUMJlCSFo05TFazElg58AqO0LJljleUNBmMdRo0u/BJ0gTwgkKSpPnRdwKV5KU+WFLSIBlnJM3WqlWr2Lhxi6cOSNLAzKYF6g+B7yc5u31eiiTNN+OMpFk57bTT2GOPPTj55JMBdhp1fSQtfn0nUFX1dOAXgf8EPpXkxiS/n2T5gOomacIYZyTN1je/+U2+8IUv8MhHPhLgZ40bkgZtVmOgquqbVfW7NM9ReRPNYOxvJ/mnJMclcUyVpDkxziwMSTMxhTQOnv70p/Oe97wH4FsYNyQN2KzHGiT5WeC17c9DwNuB7wInA68A/p/5rKAWBqcN1XwyziwMTkyhcfLtb38bYA/gLzFuSBqgvhOoJG8CXgfsD3wCeF1Vfa1r+6eA2+a9hlowvJjSXBlnJM3WOeecw8qVK1mzZg3AIzBuSBqw2TRpHwn8KbBnVf1Gd3ACqKof490dSXNjnJE0K5/97Gf57d/+bdatWwfwXeOGwG7GGqzZJFBfqqpPVtUD3SuTvKWzXFWfm7eaSZpExhlJs3LYYYdxzDHHsP3222+23rghe8ZoUGaTQL19mvW/Px8V0ewsW9bcXZEWGeOMpFk5/fTTp9tk3JA0EDOOgUrygk7ZJM8Hui/bnwDcPYiKaevG9a5KJ6lzQgnNhnFG0mxddtllAGzcuJEvfvGLVBXAzm086StuJDkC+HNgCfCBqvrjKdt3AD4CPAP4IfCqqrolyYuAPwa2Bx4AfreqLmv3eQbwYeCRwCXA/6y2covNsmXjez3S4SRXGoR+JpH4YPvvDsB5XesLWA/8v/NdKS184x5QNXaMM5Jm5cQTTwTg/vvv5w1veENn9XLgA/QRN5IsAc4BXgSsBa5Msqqqru9+G+DOqto/ybHAmcCrgNuBX66qdUmeAlwK7NXu85fAScDXaBKoI4DPzulkx9RC+b9+odRTC8eMCVRV7QeQ5CNVdfzgqyRp0hhnJM3WzTffDMDxxx/PRz7yEQCSXFNVK/o8xCHAmqq6qd33AuAooDuBOgp4R7t8EXB2klTVN7rKXAfs2LZWPQZ4dFV9tT3mR4CXsUgTKGlS9T0GyosaSYNmnJE0W53kaRvsBdza9XotD7cibVGmqjYCdwG7TSnzCuAbVXV/W37tDMcEIMlJSVYnWb1hw4ZtPQdJI7DVBCrJDV3Ltyb5bq+fft4oyRFJbkyyJskpPbbvkOTCdvsVSZa361+U5Kok17T/vqBrn2e069ckeV/itArSAnRQZ2GucUbSZHjyk5+8aXmfffZh3333Zd999wV46iziRq9rhqljlbZaJslBNN36fm0Wx2xWVp1bVSuqasXSpUtnqKqkcTJTF75f7Vp+7ba+if2MJ5MDN9Wn73Qtb3OckTQ53v/+929a/uhHP7pp+bDDDruZh5OZmawF9ul6vTewbpoya5NsB+wC3AGQZG/gYuD4qvp2V/m9ZzimpAVuqwlUVX2la/nyObyP/YwnlAM31Yd7OgtzjDOSJsRzn/vcTcuHHnpo96Z7ZhFHrgQOSLIf8D3gWOA1U8qsAk4AvgocDVxWVZVkV+DvgVOr6p87havq+0nuTvJs4ArgeOD/zObcJI2/vsdAJXlLkoPb5We3zeM3JXlOH7uPtJ+xpIVhjnFG0gR673vfy9VXX915uVO/caO91jiZpmfLDcAnquq6JKcneWlb7IPAbknWAG8BOkMQTgb2B05LcnX787h226/TzAS4Bvg23tiVFp1+pjHveDMPTzX8R8B7aZ6x8GfAs2bYdz77GR8+i2N29j2Jpqtfp4+0pPE0lzgjaQKdddZZm6Y0p7mR+nb6jBtVdQnNEIDudW/vWr4POKbHfmcAZ0xzzNXAU/o/Aw2Dwwo0n2aTQO1SVXcl2Rl4OvCLVfVgkj/tY9+R9jOuqnOBcwFWrFixKB9mJy0Sc4kzkibQXXfdxS677MLdd98N8NPA/zFuqBeHFWi+zCaBujXJz9PMmPVPbXB6NPBgH/vaz1hSP+YSZyRNoH322Yd/+Zd/4brrrgO427ghadBmk0D9Ls3kDg/QjEUCeAnw9Zl2rKqNSTr9jJcA53X6GQOrq2oVTbedlW0/4ztokizYvJ/xae26w6vqNpp+xh8GHknTx9h+xtLCts1xRtJkes973sPRRx/N9ttvD/D9drVxQ9LApGrbe7QleQRAVf1k3mo0YCtWrKjVq1ePuhpztpCeeDWHr5gmQJKrqmrFVraPZZxZaLFkUDHDv2+Nk048Gde4MZ2FFk86FtK1SIcxS/3a2vXJbFqgSLIL8ETgUVM2XbaNdZOkzRhnFhYHZmsc3HXXXdx4440AOyd5Qdcm44akedd3ApXk9TQPw70H+HHXpgKeML/VkjSJjDMLkwOzNUof/vCHedOb3sSjHvUogOU8PJOncUPSQMymBepdwNFV5TgjSYNinPT968YAABsBSURBVJE0K29729u46KKLOPLII0lyzda6BEvSfOj7Qbo0ydbnBlURScI4I2mWNm7cyOGHHz5zQUmaJ7NJoM4Efj/JbPaRpNkwzkialbe+9a2cccYZPPTQQ6OuiqQJMZsufG8GlgH/K8kPuzdU1b7zWitNa9kyxxtoUTPOSJqVs846i/Xr1/Mnf/InAE9N8t3ONuOGpEGYTQL12oHVQn0zedIiZ5yRNCsf/ehHNy0fdthhNwO/NrraTAZv5mrS9Z1AVdXlg6yIJBlnJM3WoYce2v3yHuPI4Jk8adL1Pc4gyQ5J3pXkpiR3tesOT3Ly4KonaZIYZyTN1v3338/b3vY2nvCEJwAcDMYNSYM1m4HaZwFPAY6jebYCwHXAr893pbSlZcsW5hO/pVkyzkialTe/+c1ce+21fOxjH+tebdyQNDCzGQP1cmD/qro3yUMAVfW9JHsNpmrqZnO5JoRxRtKsXHzxxaxZs4addtpp0zrjhqRBmk0L1ANMSbiSLAV+2Lu4JM2acUbSrGy//fZs3Lhxs3XGDUmDNJsE6pPA+Un2A0iyB3A2cMEgKiZpIs0pziQ5IsmNSdYkOaXH9h2SXNhuvyLJ8nb9i5JcleSa9t8XzNsZSRqoY445hhNOOIGbb74Z8PpE0uDNJoH6PeBm4BpgV+Dfge8D7xxAvSRNpm2OM0mWAOcARwIHAq9OcuCUYicCd1bV/jTjrc5s198O/HJVPRU4AVg591ORNAzvfve72W+//XjqU58KsASvT7QVSTOuXJqL2SRQ+wP/Brwb+APgOVX1W1X1wEBqpkXDYKVZmEucOQRYU1U3teUvAI6aUuYo4Px2+SLghUlSVd+oqnXt+uuAHZPsMNeTmST+nWtU1qxZw5Oe9CR+7/d+D2AdXp9oBo4r11zNOIlEkgAfpLkru5YmOO0F/EGSlcAbqqq2cgjJYKWtmqc4sxdwa9frtcCzpitTVRvbqdJ3o2mB6ngF8I2qun8bT2di+XeuYaoqTjzxRM4//3z23ntv9txzT4DHAt/w+kTSIPXTAnUScBjw7Kp6fFU9p6r2BZ4DPA+f+C1p7uYjzvSa6H/qxdNWyyQ5iKZbX8/3S3JSktVJVm/YsKGPKkkalHPPPZcvfelLfO1rX+M73/kOX/3qV6Hp/tt33JjDuMndknwxyT1Jzp6yz5faY17d/jxuHk5X0hjpJ4F6HfCbVXVl98r29W+12yVpLuYjzqwF9ul6vTdNS1bPMkm2A3YB7mhf7w1cDBxfVd/u9QZVdW5VraiqFUuXLu2jSqPnM+S0WK1cuZL3ve99PPOZz9xsfb9xY47jJu8DTgN+Z5rDH1dVB7c/t83itCQtAP0kUAcCl0+z7fJ2uyTNxXzEmSuBA5Lsl2R74Fhg1ZQyq2i6CQIcDVxWVZVkV+DvgVOr6p9nXfsxZrc6LVbXX389hx566HSb+4kbcxk3eW9VfYUmkZI0YfpJoJZU1d29NrTr+5qIwmZySVsx5zhTVRuBk4FLgRuAT1TVdUlOT/LSttgHgd2SrAHeAnRi0ck0E1icZjyRFoYHH3yQnXfeuee2PuNGr3GTUx++u9m4SaAzbnImH2rjyGntGM8t2CVYWrhmnEQCeESS59N77EBfx+hqJn8RTYC6Msmqqrq+q9imZvIkx9I0k7+Kh5vJn9L+THVcVa3u4zwkja85xxmAqroEuGTKurd3Ld8HHNNjvzOAM/quraSR+8lPfsIXv/hFpswTsXPXc9xmihtzHjc5jeOq6ntJdgY+RdOV8CNbHKTqXOBcgBUrVjjZxZAlsPvusH79qGuihaifi5LbgPNm2D6TTc3kAEk6zeTdCdRRwDva5YuAszvN5MBXkuzfx/tojBmstBXzEWckTZDHPe5xvOENb5i6ejlNSzPMHDdmM25y7dRxk9Opqu+1/96d5OM010BbJFAaPbs4a1vNmEBV1fJ5eJ/5ml64lw8leZDmLs8ZvaYsTXISzSxf7Lvvvtt0ApofBiv1Mk9xRtIEueWWW7ZYl+SaqlrR5yE2jZsEvkczbvI1U8p0xk1+la5xk9MdsE2ydq2q25M8AngJ8IU+6yNpgeirW8w8sJlckiSNjfZmbWfc5BLgvM64SWB1Va2iac1a2Y6bvIMmyQIgyS3Ao4Htk7wMOBz4DnBpmzwtoUme3j/E05I0BMNKoGwml6QJYFddLSTbOm6y3bZ8msM+Y77qJ2k89TWD3jzY5umFpztgku2SPLZd7jSTXzvvNZckzYpddSVJi9lQWqBsJpckSZK0GAyrC5/N5JIkSZIWvGF14ZMkTZCk+Vm2bNQ1kSRpfplASZIGxvFQksaZN3q0LUygxtyyZc0f92JisJIkSePCGz2aLROoMbdY/6gX63lJkiRpcTOBkiRJkqQ+mUBpZOzKJ0mSpIXGBEojZVc+SZIkLSQmUJIkSZLUJxMoSZIkzWgxzgwsbQsTKEmSJM1oMXe7d1y2ZsMESpIkSRNvMSeIml8mUJIkSZLUJxMoSdJA2TVG0kJhvFI/TKAkSQNn1xhJC4XxSjMxgdLIebdHmgz+rUuSFgMTKI0F7/ZIk8G/dUnSQmcCJUkaKluiJEkLmQmUJGnobInSOEhyRJIbk6xJckqP7TskubDdfkWS5e363ZJ8Mck9Sc6ess8zklzT7vO+xEfPSouNCZQkSZo4SZYA5wBHAgcCr05y4JRiJwJ3VtX+wFnAme36+4DTgN/pcei/BE4CDmh/jpj/2ksapaElUN7lkSRJY+QQYE1V3VRVDwAXAEdNKXMUcH67fBHwwiSpqnur6is0idQmSfYAHl1VX62qAj4CvGygZyFp6IaSQHmXR/1wXIQ0Wfyb14jtBdza9Xptu65nmaraCNwF7DbDMdfOcEwAkpyUZHWS1Rs2bJhl1SWN0rBaoLzLo744LkKaLD/4QZNILVliQqWh69VrpbahzDaVr6pzq2pFVa1YunTpVg4padwMK4HyLo8kaVoPPdT8600UDdFaYJ+u13sD66Yrk2Q7YBfgjhmOufcMx9QC4A0dbc2wEijv8szCsmXNH64juiRNou4WKVumNEBXAgck2S/J9sCxwKopZVYBJ7TLRwOXtb1eeqqq7wN3J3l2Oy77eODT8191DYM3dDSd7Yb0PrO5y7N20u/y+AcradJ1WqRsmdKgVNXGJCcDlwJLgPOq6rokpwOrq2oV8EFgZZI1NNckx3b2T3IL8Ghg+yQvAw6vquuBXwc+DDwS+Gz7I2kRGVYCtekuD/A9mgD0millOnd5vkqfd3mS3J3k2cAVNHd5/s8gKi9JGg/Llj2cTO2+O6xfP9r6aGGrqkuAS6ase3vX8n3AMdPsu3ya9auBp8xfLSWNm6EkUN7lkSTNh+6WKFulJA1aZziFN2zUbVgtUN7lkSTNieNCJY2KN2zUbWgP0pX65YBxae46k9FIkqT5ZQKlseSdHm2LJEckuTHJmiSn9Ni+Q5IL2+1XJFnert8tyReT3JPk7GHXexD8G5IkaTBMoCQtCkmWAOcARwIHAq9OcuCUYicCd1bV/sBZwJnt+vuA04DfGVJ1NU9ssZYGzxZtaXMmUJIWi0OANVV1U1U9AFwAHDWlzFHA+e3yRcALk6Sq7q2qr9AkUlpgbG2TBsu/MWlzJlAaW95Z1iztBdza9Xptu65nmaraCNwF7DaU2mmgjBeSBs04ow4TKI0173ppFnp1MJn6LLl+ykz/BslJSVYnWb1hw4ZZVU6DZ7yQNGjGGYEJ1Fixj7E0J2uBfbpe7w2sm65Mku2AXWieO9eXqjq3qlZU1YqlS5fOsboatE5M9Y6xJGk+mUCNEe9qSHNyJXBAkv2SbE/zMO5VU8qsAk5ol48GLquqvlugNP66E6ZOTDW2SpLm09AepCtJg1RVG5OcDFwKLAHOq6rrkpwOrK6qVcAHgZVJ1tC0PB3b2T/JLcCjge2TvAw4vKquH/Z5aO5MmCQNUgI/9VPw0EMP/7v77rB+/ahrpmExgZK0aFTVJcAlU9a9vWv5PuCYafZdPtDKSZIWjYce2vxfb9xMFrvwaewlsGSJYxkk9c/xpJKkQTGB0oLQfYcnMZmSNDvGDEnSfDGB0oJlc7mk2TBmSJLmgwmUFjTvKkuSJGmYTKC04HlXWVK/vOki9c/nU0q9mUBJkiZKZyylk9NIW+cNytkxnkwOE6gx4B0eSRo+px+WNN+MJ5PBBGoM+McmSZIkLQwmUJKkiWeXvsmU5IgkNyZZk+SUHtt3SHJhu/2KJMu7tp3arr8xyYu71t+S5JokVydZPZwzmV/2jJG2bmgJlEFKkjTO7NI3WZIsAc4BjgQOBF6d5MApxU4E7qyq/YGzgDPbfQ8EjgUOAo4A/qI9Xsfzq+rgqlox4NMYCP8G5sYbMYvfUBIog5QGzbvHkqRZOgRYU1U3VdUDwAXAUVPKHAWc3y5fBLwwSdr1F1TV/VV1M7CmPZ4EPDxZjdcki9OwWqAMUj3YRD6/vHssSZqFvYBbu16vbdf1LFNVG4G7gN1m2LeAzyW5KslJ0715kpOSrE6yesOGDXM6EY0vr0kWp2ElUAapLp3EyT8qSRpPiXePJ0CvW5jVZ5mt7fsLVfVzNL1u3pTkv/V686o6t6pWVNWKpUuX9ltnSWNgWAmUQaqLiZMkLQzG60VtLbBP1+u9gXXTlUmyHbALcMfW9q2qzr+3ARezSHrNSHrYsBIog5QkaUGyJWrRuhI4IMl+SbanGW+9akqZVcAJ7fLRwGVVVe36Y9sJsPYDDgC+nmSnJDsDJNkJOBy4dgjnMi8cWiD1Z1gJlEFKkobAC6DBcED44tMOFzgZuBS4AfhEVV2X5PQkL22LfRDYLcka4C3AKe2+1wGfAK4H/gF4U1U9COwOfCXJN4GvA39fVf8wzPOaC1tcB8PYsfhsN4w3qaqNSTpBaglwXidIAaurahVNkFrZBqk7aJIs2nKdILWRNkgl2R24uJlngu2Ajy+kIKXBSmD33WH9+lHXRBouL4AGy893camqS4BLpqx7e9fyfcAx0+z7LuBdU9bdBDx9/ms6OMuW+b0ehs5NGK9NFoehJFBgkNLwGawkDYJxRYuJydNw+XkvDkN7kK7sWjMqBitJ8824IkmTywRqiPwPV5IWD8c1SNJkMoEaAlueJGlx8saYJE0eE6gh8D/Y0fNOsaRB6twoM85ImomxYuEzgdLEcBpiSYOQPHyjzBtmWijsHTNanWuSBJYs8fpkoTGB0sTxAkfSIHkhpIXA/wvHx0MPNf/6O1k4TKAkSZpnXghJ0uJlAqWJZJO5pEEzvkiaLePGwmACpYllk7kWE8czjKfOOAdv2Ejql2O2x58JlISBSgufNwLGW/cNm87AcWOORsGbLQuHcX18mUANkEFqYTFQSRom7zJrFPy/Tpo7E6gBMkhJkmZiIiVpOsaG8WQCNQC2PC1cdq2RNComUhokr00WLm/Ijx8TqAHwi77weSEjaVSMPxoEr00Wtu7JaJyUZvRMoKStcAYtjTvvKi9eJlKSunUmo3EW4dEzgZL6MHUGLS9oNC78D3TxM+5oLrzJsrh5k3c0TKDmkUFqcnQuWju/c4OWtmYQ3xPjzeQxkdK28CbL4meL1PCZQM0jv7iTJXn4d+7vXlsziO+J37nJNV3X4k5SbZIlTa7u2GAsGJyhJVBJjkhyY5I1SU7psX2HJBe2269Isrxr26nt+huTvLjfY0rDZKAavUHEGWlcTe1a3J1U21rVP69PtNh0YgPYY2ZQhpJAJVkCnAMcCRwIvDrJgVOKnQjcWVX7A2cBZ7b7HggcCxwEHAH8RZIlfR5zYLrv9HUyfWnqRYsBa3gGEWeGVfd+dL5LxhvNRr8tlZMaqxby9cl0vzNjhaaa2mNmEv/W59uwWqAOAdZU1U1V9QBwAXDUlDJHAee3yxcBL0ySdv0FVXV/Vd0MrGmP188x52y6ANX9n1J3pi/BlneEO68NWgM1iDgz7/r5Dky9AOr+LhlvNFtbG2Te+a5NcHfkBXd9MtPvzFihfkztCuxEFLMzrARqL+DWrtdr23U9y1TVRuAuYLet7NvPMbdZrwDlHR3Nh+mClsFrzgYRZwZipu+AF0Cab1O7+039rnXb2nezO6mfqcy2/jvkuLjgrk9m+p1Js9FravTZ/p1Od2NmMV/PbDek9+n1J119lplufa/kb+oxmwMnJwEntS/vSXLjNPXs9ljg9qkrR3RB07MuI2Jdept1XaYGranBa5h1GaB+6vL4eXqvQcSZzXfetlgCM8STqf8O0Lh8N6zH5oZej2m+a5vqMd13s3u/mcps67/AYx96aPN6zCIuzjaejOz6ZFDxZIgm9u9nGouqHrOJAdP8fT72Bz/g9jFI6ufyeUwbT4aVQK0F9ul6vTewbpoya5NsB+wC3DHDvjMdE4CqOhc4dzYVTrK6qlbMZp9BsS69WZfeJrgug4ozm2xLLIHx+Z1YD+thPbYwsusT44n1sB4Ltx7D6sJ3JXBAkv2SbE8z6HLVlDKrgBPa5aOBy6qq2vXHtrPg7AccAHy9z2NKmhyDiDOSFjevTyTN2lBaoKpqY5KTgUuBJcB5VXVdktOB1VW1CvggsDLJGpo7O8e2+16X5BPA9cBG4E1V9SBAr2MO43wkjZ9BxRlJi5fXJ5K2xbC68FFVlwCXTFn39q7l+4Bjptn3XcC7+jnmPJp1s/oAWZferEtvE1uXQcSZeTIuvxPrsTnrsbmJrIfXJ9vMemzOemxuUdcjTSu0JEmSJGkmwxoDJUmSJEkLnglUD0mOSHJjkjVJThnye++T5ItJbkhyXZL/2a5/TJLPJ/n39t+fGVJ9liT5RpK/a1/vl+SKth4XtgNkhyLJrkkuSvJv7efznFF8Lkne3P5urk3yN0l2HObnkuS8JLclubZrXc/PIY33td/lbyX5uSHU5T3t7+hbSS5OsmvXtlPbutyY5MXzWZdxNKpYYhzpWYeJjx/jEjuMG9vGeLKpPsaTh+sxknhiLDGB2kKSJcA5wJHAgcCrkxw4xCpsBH67qp4MPBt4U/v+pwD/WFUHAP/Yvh6G/wnc0PX6TOCsth53AicOqR4Afw78Q1U9CXh6W6+hfi5J9gJ+E1hRVU+hGSB8LMP9XD4MHDFl3XSfw5E0M0MdQPO8kb8cQl0+Dzylqp4G/F/gVID2e3wscFC7z1+0f2+L0ohjiXFkS8aP8Ykdveph3NgK48lmjCeMPJ58mEmPJVXlT9cP8Bzg0q7XpwKnjrA+nwZeBNwI7NGu2wO4cQjvvTfNH8ELgL+jeWjg7cB2vT6rAdfl0cDNtOP2utYP9XPh4SfMP4ZmEpa/A1487M8FWA5cO9PnAPw18Ope5QZVlynbXg58rF3e7G+JZoaq5wzj+zOKn3GKJZMeR4wfm9VhLGKHcWPWn5fxpIwnU95vpPFk0mOJLVBb6nwhO9a264YuyXLgvwJXALtX1fcB2n8fN4Qq/Bnwv4DOc6d3A35UVRvb18P8bJ4AbAA+1DbdfyDJTgz5c6mq7wH/G/gu8H3gLuAqRve5dEz3OYz6+/wG4LNjUpdhG4vzNY4Axo+tGcfYMclxYzpj8TkYTwDjyXQmKpaYQG0pPdYNfarCJI8CPgX8VlX9xwje/yXAbVV1VffqHkWH9dlsB/wc8JdV9V+Bexled4FN2j69RwH7AXsCO9E0T081LtNbjux3luRtNF0/PjbquozIyM/XOLKJ8WP2RvL9NW5Ma+Sfg/FkE+PJ7CzKWGICtaW1wD5dr/cG1g2zAkkeQROkPlZVf9uu/kGSPdrtewC3DbgavwC8NMktwAU0zeV/BuyapPP8sGF+NmuBtVV1Rfv6IpoANuzP5ReBm6tqQ1X9BPhb4OcZ3efSMd3nMJLvc5ITgJcAx1XbVj6quozQSM/XOLIZ48f0xiZ2GDe2ynhiPJlq3OLJRMUSE6gtXQkc0M5isj3NgLNVw3rzJKF56vkNVfXerk2rgBPa5RNo+iAPTFWdWlV7V9Vyms/gsqo6DvgicPSw6tFVn/XArUme2K56Ic3T34f6udA0lT87yU+3v6tOPUbyuXSZ7nNYBRzfzoLzbOCuThP7oCQ5Angr8NKq+vGUOh6bZIck+9EMKP36IOsyYiOLJcaRLeph/JjeWMQO48aMjCfGk6nGLZ5MViyZr0Fci+kH+CWamTu+DbxtyO/9XJomxW8BV7c/v0TTz/cfgX9v/33MEOt0GPB37fIT2i/cGuCTwA5DrMfBwOr2s/n/gJ8ZxecCvBP4N+BaYCWwwzA/F+BvaPo7/4TmjsqJ030ONE3W57Tf5WtoZusZdF3W0PQz7nx//6qr/NvautwIHDms786ofkYVS4wjPd9/4uPHuMQO48Y2f27Gk4frZDyp0cUTY0k1M4hIkiRJkmZmFz5JkiRJ6pMJlCRJkiT1yQRKkiRJkvpkAiVJkiRJfTKBkiRJkqQ+mUBJkiRJUp9MoDSWknwpyZ1Jdhh1XSQtbMYTSfPBWKIOEyiNnSTLgefRPLjvpSOtjKQFzXgiaT4YS9TNBErj6Hjga8CHgRM6K5PsluQzSf4jyZVJzkjyla7tT0ry+SR3JLkxySuHX3VJY8Z4Imk+GEu0yXajroDUw/HAe4ErgK8l2b2qfgCcA9wLLAOWA5cC3wFIshPweeDtwJHA04DPJbmuqq4b+hlIGhfGE0nzwViiTWyB0lhJ8lzg8cAnquoq4NvAa5IsAV4B/EFV/biqrgfO79r1JcAtVfWhqtpYVf8KfAo4esinIGlMGE8kzQdjiaYygdK4OQH4XFXd3r7+eLtuKU2L6a1dZbuXHw88K8mPOj/AcTR3hCRNJuOJpPlgLNFm7MKnsZHkkcArgSVJ1rerdwB2BXYHNgJ7A/+33bZP1+63ApdX1YuGVF1JY8x4Imk+GEvUS6pq1HWQAEjyapq+xAcDD3Rt+gRwJU2AehD4H8C+wOeA71bVc5PsDFwL/D5wQbvfwcA9VXXDcM5A0rgwnkiaD8YS9WIXPo2TE4APVdV3q2p95wc4m6bJ+2RgF2A9sBL4G+B+gKq6GzgcOBZY15Y5k+YukaTJYzyRNB+MJdqCLVBasJKcCSyrqhNmLCxJW2E8kTQfjCWTwRYoLRjtsxSelsYhwInAxaOul6SFx3giaT4YSyaTk0hoIdmZpml8T+A24E+BT4+0RpIWKuOJpPlgLJlAduGTJEmSpD7ZhU+SJEmS+mQCJUmSJEl9MoGSJEmSpD6ZQEmSJElSn0ygJEmSJKlPJlCSJEmS1Kf/HyAAH9p5O89CAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 1008x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(14,4))\n",
    "# Set up the plot\n",
    "data_for_hist = [imdb_age, wiki_age, imdb_wiki_age]\n",
    "title_for_hist = ['imdb', 'wiki', 'imdb_wiki']\n",
    "\n",
    "for i in range(len(data_for_hist)):\n",
    "    ax = plt.subplot(1, 3, i+1)\n",
    "    ax.hist(data_for_hist[i], bins=100, density=True, color = 'blue', edgecolor = 'blue')\n",
    "    ax.set_title(title_for_hist[i], size = 12)\n",
    "    ax.set_xlabel('Age', size = 12)\n",
    "    ax.set_ylabel('Density', size= 12)\n",
    "\n",
    "\n",
    "plt.suptitle('Age Distribution (histogram plot)', size= 12)\n",
    "plt.savefig(\"IMDB-WIKI age hist plot.pdf\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "size of the bucket “15 to 25 years old\" :\n",
      "imdb data set:       73476\n",
      "wiki data set:       17242\n",
      "imdb-wiki data set:  90718\n"
     ]
    }
   ],
   "source": [
    "# get the size of the bucket “15 to 25 years old”\n",
    "print('size of the bucket “15 to 25 years old\" :')\n",
    "print('imdb data set:      ', imdb_age[(imdb_age >= 14.5) & (imdb_age < 25.5)].shape[0])\n",
    "print('wiki data set:      ', wiki_age[(wiki_age >= 14.5) & (wiki_age < 25.5)].shape[0])\n",
    "print('imdb-wiki data set: ', imdb_wiki_age[(imdb_wiki_age >= 14.5) & (imdb_wiki_age < 25.5)].shape[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Notes:  - Definition of \"30 year old males\"**\n",
    "\n",
    "Strictly speaking, \"30 year old male\" means a man is exactly 30 years old (years=30, months=0, days=0). But in our daily life, \"30 year old male\" would generally mean a man, his is about 30 years old. Thus approximation and rounding get involved. And we would define \"30 year old male\" as: a man with age greater than or equal to 29.5 and less than 30.5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get  \"30 year old males\" cnt\n",
    "imdb_30_male_cnt = imdb_wiki[(imdb_wiki['dataset'] == 'imdb') & \n",
    "                             (imdb_wiki['gender'] == 1) &\n",
    "                             (imdb_wiki['age_year'] >= 29.5) &\n",
    "                             (imdb_wiki['age_year'] < 30.5)].shape[0]\n",
    "\n",
    "wiki_30_male_cnt = imdb_wiki[(imdb_wiki['dataset'] == 'wiki') & \n",
    "                             (imdb_wiki['gender'] == 1) &\n",
    "                             (imdb_wiki['age_year'] >= 29.5) &\n",
    "                             (imdb_wiki['age_year'] < 30.5)].shape[0]\n",
    "\n",
    "imdb_wiki_30_male_cnt = imdb_wiki[(imdb_wiki['gender'] == 1) &\n",
    "                                  (imdb_wiki['age_year'] >= 29.5) &\n",
    "                                  (imdb_wiki['age_year'] < 30.5)].shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "imdb data set:       1.5%\n",
      "wiki data set:       2.4%\n",
      "imdb-wiki data set:  1.6%\n"
     ]
    }
   ],
   "source": [
    "print('imdb data set:      ', \"{0:.1%}\".format(imdb_30_male_cnt / imdb_wiki[(imdb_wiki['dataset'] == 'imdb')].shape[0]))\n",
    "print('wiki data set:      ', \"{0:.1%}\".format(wiki_30_male_cnt / imdb_wiki[(imdb_wiki['dataset'] == 'wiki')].shape[0]))\n",
    "print('imdb-wiki data set: ', \"{0:.1%}\".format(imdb_wiki_30_male_cnt / imdb_wiki.shape[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
